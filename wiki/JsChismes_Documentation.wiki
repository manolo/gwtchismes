== JsChismes library usage ==

 * Download last version of the library: jschismes-x.x.x.jar and umcompress it in a static folder served by yout http-server
 * Include either the obfuscated or the pretty version of the library in your html file
{{{
<head>
 <script language="javascript" src="http://yourwebsite.com/yourpath/jschismes.JsChismes.nocache.js"></script>
 <!-- <script language="javascript" src="http://yourwebsite.com/yourpath/jschismes.JsChismesPretty.nocache.js"></script> -->
</head>
}}}

 * Use the widgets using javascript in your page:
{{{
  <script>
        var calendar = new jsc.DatePicker({
          dialog: true,
          className: "GWTCDatePicker-custom",
          buttons: "flat",
          onSelect: function(data) {
            alert("Selected: " + jsc.Utils.formatDate(jsc.Const.LONG_FORMAT, data.selected) );
          }
        });
        calendar.show();
  </script>
}}}

== JsChismes library API ==

 * *Utils*

   * Instance methods
{{{

/* Camelizes css names: margin-left -> marginLeft */
var string = jsc.Utils.camelize(s);

/*
Returns a formated and internationalizated date representation.

format parameter has these symbols:
Year:   yy(09) yyyy(2009)
Month:  MM(01) MMM(Jan) MMM(January)
Day:    dd(01)
WeekDay E(M) EE(Mo) EEE(Mon) EEEE(Monday)
*/
var string = jsc.Utils.formatDate(format, date);

/* Parses a string representation of a date and returns a date object */
var javascriptobject = jsc.Utils.parseDate(format, dateStr);
}}}
 * *DatePicker*
JavaScript Implementation of a customizable DatePicker.

It takes a properties block as argument with optional parameters that which are preconfigured with default values.

   * Instance methods
{{{

/* Show the modal dialog containing the data-picker centered in the page */
.show();

/*
Returns a JavaScript hash structure with this information:
data.selected // The user selected date
data.minimal  // The minimal date allowed to select
data.maximal  // The maximal date allowed to select  
*/
var javascriptobject = .data();

/* Specify the selected date   */
.setSelected(date);

/*
Specify the JavaScript function which will be called when the user selects a date
The function have to define the parameter data used to return the datepicker information 
*/
.addSelectListener(c);

/* Returns the selected date */
var javascriptobject = .getSelected();

/* Show the modal dialog containing the data-picker beside the  especified element. */
.show(elem);

/* Hide the modal dialog containing the data-picker. */
.hide();
}}}
 * *IntervalSelector*
JavaScript Implementation of an Interval selector.

It takes a javascript properties block as argument.

   * Instance methods
{{{

/* Returns the final date of the selected interval */
var javascriptobject = .getEnd();

/*
Returns a JavaScript hash structure with this information:
data.init     // The start date that has selected the userhj
data.end      // The end date selected by the user
data.nights   // Number of nights in the interval
data.days     // Number of days in the interval (identical to nights)
data.maximal  // The maximal date allowed to select  
data.minimal  // The minimal date allowed to select
data.maxdays  // The maximal of days(nights) allowed in the interval  
*/
var javascriptobject = .data();

/*
Specify the JavaScript function which will be called when the user selects a date o changes the number of days
The function have to define the parameter data used to return the datepicker information 
*/
.addSelectListener(c);

/* Returns the initial date of the selected interval */
var javascriptobject = .getInit();

/* Returns the number of nights in the interval */
var int = .getNights();
}}}
 * *Progress*
JavaScript Implementation of progress bar that has a time calculation based on the data provided when is updated.

It takes a javascript properties block as argument.

   * Instance methods
{{{

/*
Set the progress. Remaining time and percent is calculated automatically 
based in these values and the time period between calls to this method.
*/
.setProgress(done, total);

/* Set the description text. */
.setText(text);

/* Show the modal dialog containing the progress when it is configured as a dialog */
.show();

/* Return the container element, useful for moving it in the DOM */
var element = .getElement();

/* Hide the modal dialog */
.hide();

/*  */
.run();

/* Show the modal dialog containing the progress bar, and configures a timer to automatically update the progress. */
.show(seconds);
}}}
 * *Wait*
JavaScript Implementation of a modal box which informs the user that the application is working and avoids user interaction with the aplication.

It takes a javascript properties block as argument.

   * Instance methods
{{{

/* hide the wait dialog */
.hide();

/*
Show the modal dialog containing the wait dialog, and hide it when the number of seconds is reached.
A value of 0 means show it untill hide() method is called
*/
.show(seconds);
}}}
 * *Alert*
JavaScript Implementation of a modal Dialog

It takes a javascript properties block as argument.

   * Instance methods
{{{

/*  */
.onClick(sender);

/* hide the alert box */
.hide();

/* show the modal dialog containing the dialog, with the message provided. */
.alert(msg);

/*
Show the modal dialog containing the alert dialog, and hide it when the number of seconds is reached.
A value of 0 means show it untill hide() method is called
*/
.show(seconds);

/*
Specify the JavaScript function which will be called when the user clicks on the OK button
The function have to define a parameter with the element clicked 
*/
.addListener(c);
}}}
 * *Box*
JavaScript Implementation of a decorated with rounded corners panel

It takes a javascript properties block as argument.

   * Instance methods
{{{

/* Add a new element to the panel */
.add(object);

/* Remove all child elements from the panel */
.clear();

/* Add a new element to the panel, in the specified direction (NORTH, SOUTH, EAST, WEST) */
.add(object, direction);
}}}
 * *Button*
JavaScript Implementation of a Button which can be rendered enterelly using html elements or can use the native browser buttons.

It takes a javascript properties block as argument.

   * Instance methods
{{{

/* Return the container element, useful for moving it in the DOM */
var element = .getElement();

/*  */
.onClick(w);

/*
Specify the JavaScript function that will be called when the user clicks on the button
The function have to define a parameter with the element clicked 
*/
.addListener(c);
}}}
 * *Popup*
JavaScript Implementation of popup dialog that can use rounded corners.

It takes a javascript properties block as argument.

   * Instance methods
{{{

/* Add a new element to the panel */
.add(object);

/* Remove all child elements from the panel */
.clear();

/* Add a new element to the panel, in the specified direction (NORTH, SOUTH, EAST, WEST) */
.add(object, direction);

/* Hide the dialog */
.hide();

/*
Show the modal dialog containing the dialog, and hide it when the number of seconds is reached.
A value of 0 means show it untill hide() method is called
*/
.show(seconds);
}}}
