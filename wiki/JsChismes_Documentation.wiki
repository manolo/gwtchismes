== Usage of JsChismes library. ==

 * Download last version of the library: jschismes-x.x.x.jar and umcompress it in a static folder served by yout http-server
 * Include either the obfuscated or the pretty version of the library in your html file
{{{
<head>
 <script language="javascript" src="http://yourwebsite.com/yourpath/jschismes.JsChismes.nocache.js"></script>
 <!-- <script language="javascript" src="http://yourwebsite.com/yourpath/jschismes.JsChismesPretty.nocache.js"></script> -->
</head>
}}}

 * Use the widgets using javascript in your page:
<body>
  <script>
        var calendar = new jsc.DatePicker({
          dialog: true,
          className: "GWTCDatePicker-custom",
          buttons: "flat",
          onSelect: function(data) {
            alrt.alert("Selected: " + jsc.Utils.formatDate(jsc.Const.LONG_FORMAT, data.selected) );
          }
        });
        calendar.show();
  </script>
</body>



 * DatePicker
{{{
/* 
JavaScript Implementation of a customizable DatePicker.

It takes a properties block as argument with optional parameters that which are preconfigured with default values.
*/
var datepicker = new jsc.DatePicker ({
   numberOfColums: 3,  // Number of months per row when displaying multiple months
   monthRange: 12,  // Number of months to show in the months menu selector
   stepMonths: 1,  // Number of months to step back/forward
   lettersInWeekDayHeaders: 3,  // Set desired number of digits for day names in week headers, 0 means default for this language
   containerId: null,  // Id of the element where the widget will be inserted
   roundedBox: false,  // show the element inside a decorated rounded container
   autoHide: true,  // hide the dialog if the user click outside
   animate: true,  // animate popup when is shown or hidden.
   glassPanel: true,  // show a semitransparent glasspanel that covers the rest of element
   buttons: "rounded",  // Buttons style, available options are: rounded, flat, standard
   minDate: "+0d",  // The earliest selectable date
   maxDate: "+1y",  // The latest selectable date
   defaultDate: 0,  // actual date.
   onSelect: new function(data){},  // Define a callback function when a date is selected
   className: "",  // Add an optional classname to the container
   buttonsLayout: "?mx;p<->n",  // define which buttons to use and where to place them in the datepickers. ( ; panel-delimiter, ? help, x close, > next-month, < prev-month, n next-year, p prev-year, - today, _ separator). 
   numberOfMonths: 1,  // Number of months to show at a time
});

/*Show the modal dialog containing the data-picker centered in the page*/
datepicker.show();

/*
Returns a JavaScript hash structure with this information:
data.selected // The user selected date
data.minimal  // The minimal date allowed to select
data.maximal  // The maximal date allowed to select  
*/
var javascriptobject = datepicker.data();

/*Specify the selected date  */
datepicker.setSelected(date);

/*
Specify the JavaScript function which will be called when the user selects a date
The function have to define the parameter data used to return the datepicker information 
*/
datepicker.addSelectListener(c);

/*Returns the selected date*/
var javascriptobject = datepicker.getSelected();

/*Show the modal dialog containing the data-picker beside the  especified element.*/
datepicker.show(elem);

/*Hide the modal dialog containing the data-picker.*/
datepicker.hide();
}}}

 * IntervalSelector
{{{
/* 
JavaScript Implementation of an Interval selector.

It takes a javascript properties block as argument.
*/
var intervalselector = new jsc.IntervalSelector ({
   numberOfMonths: 1,  // Number of months to show at a time
   numberOfColums: 3,  // Number of months per row when displaying multiple months
   monthRange: 12,  // Number of months to show in the months menu selector
   stepMonths: 1,  // Number of months to step back/forward
   buttonsLayout: "?mx;p<->n",  // define which buttons to use and where to place them in the datepickers. ( ; panel-delimiter, ? help, x close, > next-month, < prev-month, n next-year, p prev-year, - today, _ separator). 
   minDate: "+0d",  // The earliest selectable date
   maxDate: "+1y",  // The latest selectable date
   maxDays: 0,  // Limit for the number of days in an inteval. 
   className: "",  // Add an optional classname to the container
   onSelect: new function(data){},  // Define a callback function when a date is selected
});

/*Returns the final date of the selected interval*/
var javascriptobject = intervalselector.getEnd();

/*
Returns a JavaScript hash structure with this information:
data.init     // The start date that has selected the userhj
data.end      // The end date selected by the user
data.nights   // Number of nights in the interval
data.days     // Number of days in the interval (identical to nights)
data.maximal  // The maximal date allowed to select  
data.minimal  // The minimal date allowed to select
data.maxdays  // The maximal of days(nights) allowed in the interval  
*/
var javascriptobject = intervalselector.data();

/*
Specify the JavaScript function which will be called when the user selects a date o changes the number of days
The function have to define the parameter data used to return the datepicker information 
*/
intervalselector.addSelectListener(c);

/*Returns the initial date of the selected interval*/
var javascriptobject = intervalselector.getInit();

/*Returns the number of nights in the interval*/
var int = intervalselector.getNights();
}}}

 * Progress
{{{
/* 
JavaScript Implementation of progress bar that has a time calculation based on the data provided when is updated.

It takes a javascript properties block as argument.
*/
var progress = new jsc.Progress ({
   timeRemaining: null,  // 
   text: null,  // Text in html elements
   numbers: null,  // 
   dialog: true,  // the picker is shown in a popup dialog
   elements: null,  // 
   hoursMsg: null,  // 
   minutesMsg: null,  // 
   secondsMsg: null,  // 
   percentMsg: null,  // 
   totalMsg: null,  // 
   className: "",  // Add an optional classname to the container
});

/*
Set the progress. Remaining time and percent is calculated automatically 
based in these values and the time period between calls to this method.
*/
progress.setProgress(done, total);

/*Set the description text.*/
progress.setText(text);

/*Show the modal dialog containing the progress when it is configured as a dialog*/
progress.show();

/*Return the container element, useful for moving it in the DOM*/
var element = progress.getElement();

/*Hide the modal dialog*/
progress.hide();

/**/
progress.run();

/*Show the modal dialog containing the progress bar, and configures a timer to automatically update the progress.*/
progress.show(seconds);
}}}

 * Wait
{{{
/* 
JavaScript Implementation of a modal box which informs the user that the application is working and avoids user interaction with the aplication.

It takes a javascript properties block as argument.
*/
var wait = new jsc.Wait ({
   text: null,  // Text in html elements
   className: "",  // Add an optional classname to the container
   image: null,  // image url in buttons
});

/*hide the wait dialog*/
wait.hide();

/*
Show the modal dialog containing the wait dialog, and hide it when the number of seconds is reached.
A value of 0 means show it untill hide() method is called
*/
wait.show(seconds);
}}}

 * Alert
{{{
/* 
JavaScript Implementation of a modal Dialog

It takes a javascript properties block as argument.
*/
var alert = new jsc.Alert ({
   roundedBox: false,  // show the element inside a decorated rounded container
   glassPanel: true,  // show a semitransparent glasspanel that covers the rest of element
   animate: true,  // animate popup when is shown or hidden.
   buttonOk: true,  // show ok button in alert widget
   className: "",  // Add an optional classname to the container
   onClose: null,  // Define a callback function when the datepicker is closed
});

/**/
alert.onClick(sender);

/*hide the alert box*/
alert.hide();

/*show the modal dialog containing the dialog, with the message provided.*/
alert.alert(msg);

/*
Show the modal dialog containing the alert dialog, and hide it when the number of seconds is reached.
A value of 0 means show it untill hide() method is called
*/
alert.show(seconds);

/*
Specify the JavaScript function which will be called when the user clicks on the OK button
The function have to define a parameter with the element clicked 
*/
alert.addListener(c);
}}}

 * Box
{{{
/* 
JavaScript Implementation of a decorated with rounded corners panel

It takes a javascript properties block as argument.
*/
var box = new jsc.Box ({
   roundedBox: false,  // show the element inside a decorated rounded container
   className: "",  // Add an optional classname to the container
   title: null,  // title in rounded boxes
   text: null,  // Text in html elements
   html: null,  // html content
   : ,  // 
});

/*Add a new element to the panel*/
box.add(object);

/*Remove all child elements from the panel*/
box.clear();

/*Add a new element to the panel, in the specified direction (NORTH, SOUTH, EAST, WEST)*/
box.add(object, direction);
}}}

 * Button
{{{
/* 
JavaScript Implementation of a Button which can be rendered enterelly using html elements or can use the native browser buttons.

It takes a javascript properties block as argument.
*/
var button = new jsc.Button ({
   type: 1,  // type
   text: null,  // Text in html elements
   onClick: null,  // Define a callback function when the element is clicked
});

/*Return the container element, useful for moving it in the DOM*/
var element = button.getElement();

/**/
button.onClick(w);

/*
Specify the JavaScript function that will be called when the user clicks on the button
The function have to define a parameter with the element clicked 
*/
button.addListener(c);
}}}

 * Popup
{{{
/* 
JavaScript Implementation of popup dialog that can use rounded corners.

It takes a javascript properties block as argument.
*/
var popup = new jsc.Popup ({
   roundedBox: false,  // show the element inside a decorated rounded container
   glassPanel: true,  // show a semitransparent glasspanel that covers the rest of element
   animate: true,  // animate popup when is shown or hidden.
   className: "",  // Add an optional classname to the container
   text: null,  // Text in html elements
   : ,  // 
});

/*Add a new element to the panel*/
popup.add(object);

/*Remove all child elements from the panel*/
popup.clear();

/*Add a new element to the panel, in the specified direction (NORTH, SOUTH, EAST, WEST)*/
popup.add(object, direction);

/*Hide the dialog*/
popup.hide();

/*
Show the modal dialog containing the dialog, and hide it when the number of seconds is reached.
A value of 0 means show it untill hide() method is called
*/
popup.show(seconds);
}}}
