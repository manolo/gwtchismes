== Usage of GWTUpload library. ==

 # Download last version of the library: gwtupload-x.x.x.jar and include it in your classpath.
 # Also, add these libraries to your application: commons-fileupload-1.2.jar, commons-io-1.3.1.jar and log4j.jar
 # Edit your module file: Xxx.gwt.xml.
{{{
<module>

  <!-- Include GWTUpload library -->
  <inherits name="gwtupload.GWTUpload"/>
  <!-- Load dinamically GWTC Style sheets when the application starts -->
  <stylesheet src="GWTUpload.css"/>
   
  <!-- Change this line with your project's entry-point -->
  <entry-point class="package.Xxx"/>
</module>
}}}
 # Edit your web.xml and include your customized servlet
{{{
<context-param>
    <!-- max size of the upload request -->
    <param-name>maxSize</param-name>
    <param-value>3145728</param-value>
  </context-param>

  <context-param>
    <!-- useful in development mode to see the upload progress bar in fast networks -->
    <param-name>slowUploads</param-name>
    <param-value>true</param-value>
  </context-param>

  <servlet>
    <servlet-name>uploadServlet</servlet-name>
    <!-- put here your customized servlet extending UploadAction -->
    <servlet-class>gwtupload.server.UploadServlet</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>uploadServlet</servlet-name>
    <url-pattern>*.gupld</url-pattern>
  </servlet-mapping>
}}}
 # Create your client application
{{{
 
/**
 * An example of a MultiUploader panel using a very simple upload progress widget
 * The example also uses PreloadedImage to display uploaded images.
 * 
 * @author Manolo Carrasco Moñino
 */
public class SimpleUploadSample implements EntryPoint {

  // A panel where the uploaded images will be shown
  FlowPanel panelImages = new FlowPanel();

  public void onModuleLoad() {
    // Create a new uploader panel and attach it to the document
    MultiUploader uploader = new MultiUploader(new BasicProgress());
    RootPanel.get().add(uploader);
    // Add a finish handler to the uploader
    uploader.setOnFinishHandler(onFinishHandler);

    // Attach the image viewer to the document
    RootPanel.get().add(panelImages);
  }

  ValueChangeHandler<IUploader> onFinishHandler = new ValueChangeHandler<IUploader>() {
    // preload the image in the document and in the case of success attach it to the viewer
    public void onValueChange(ValueChangeEvent<IUploader> event) {
      IUploader uploader = event.getValue();
      new PreloadedImage(uploader.fileUrl(), showImage);
    }
  };


  ValueChangeHandler<PreloadedImage> showImage = new ValueChangeHandler<PreloadedImage>() {
    // Attach an image to the pictures viewer
    public void onValueChange(ValueChangeEvent<PreloadedImage> event) {
      PreloadedImage img = event.getValue();
      img.setWidth("75px");
      panelImages.add(img);
    }
  };
}
}}}
 # Create your customize servlet. This is an example of sending an email with all the received items
{{{
 
/**
 * This class sends by email, all the fields and files received by GWTUpload servlet.
 * 
 * @author Manolo Carrasco Moñino
 *
 */
public class SampleServlet extends UploadAction {

  private static final String SMTP_SERVER = "your_smtp_server";
  private static final String MAIL_ADDRESS_FROM = "from_email@address";
  private static final String MAIL_ADDRESS_TO = "to_email@address";

  private static final long serialVersionUID = 1L;

  @Override
  public String doAction(Vector<FileItem> sessionFiles) throws IOException {
    try {
      // create a new multipart content
      MimeMultipart multiPart = new MimeMultipart();
      String bodyTxt = "** Form content: \n\n";
      for (FileItem item : sessionFiles) {
        if (item.isFormField()) {
          bodyTxt += "name: " + item.getFieldName() + " value: " + item.getString() + "\n";
        } else {
          bodyTxt += "name: " + item.getFieldName() + " filename: " + item.getName()  + " size: " + item.getSize() + "\n";
          // add the file part to multipart content
          MimeBodyPart part = new MimeBodyPart();
          part.setFileName(item.getName());
          part.setDataHandler(new DataHandler(new ByteArrayDataSource(item.get(), item.getContentType())));
          multiPart.addBodyPart(part);
        }
      }
      // add the text part to multipart content
      MimeBodyPart txtPart= new MimeBodyPart();
      txtPart.setContent(bodyTxt, "text/plain");
      multiPart.addBodyPart(txtPart);
      
      // configure smtp server
      Properties props = System.getProperties();
      props.put("mail.smtp.host", SMTP_SERVER);
      // create a new session and the mime message
      MimeMessage mime = new MimeMessage(Session.getInstance(props));
      mime.setText(bodyTxt);
      mime.setContent(multiPart);
      mime.setFrom(new InternetAddress(MAIL_ADDRESS_FROM));
      mime.setRecipient(Message.RecipientType.TO, new InternetAddress(MAIL_ADDRESS_TO));
      mime.setSubject("New form submitted");
      // send the message
      Transport.send(mime);
    } catch (MessagingException e) {
      return super.stackTraceToString(e);
    }
    return null;
  }

}

}}}